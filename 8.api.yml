Description: API

Resources:

  IamRoleApiLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Description: Role to allow API invoke lambda function

  IamAPIPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyDocument:
          Statement:
            - Action:
              - 'ec2:DescribeNetworkInterfaces'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DescribeInstances'
              - 'ec2:AttachNetworkInterface'
              Effect: Allow
              Resource: '*'
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource:
              - arn:aws:logs:::log-group:/aws/lambda:*

          Version: '2012-10-17'
        PolicyName: iam-production-api-policy
        Roles:
        - Ref: IamRoleApiLambda

  ApiLambdasPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaImovel.Arn
      Action: lambda:InvokeFunction
      Principal: !Ref AWS::AccountId

  LambdaProductionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: production-api/api-lambda-production-sg
      GroupName: api-lambda-production-sg
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        Description: Allow all outbound traffic by default
        IpProtocol: "-1"
      VpcId:
        Fn::ImportValue: networking-VpcId      

  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:        
        - python3.8
      Content:
        S3Bucket: !ImportValue data-lake-ApiLambdasFunctionsBucket
        S3Key: lambda_layer.zip
      Description: 'aws-psycopg2'
      LayerName: lambda-postgres-layer
      LicenseInfo: MIT

  LambdaImovel:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket: !ImportValue data-lake-ApiLambdasFunctionsBucket
        S3Key: lambda_imovel.zip
      Description: 'Listagem de imÃ³veis'
      FunctionName: "imovel"
      Handler: "lambda_function.lambda_handler"      
      Layers: 
        - !Ref LambdaLayer
      MemorySize: 128      
      Role: !GetAtt IamRoleApiLambda.Arn
      Runtime: "python3.8"
      Timeout: 30
      TracingConfig: 
        Mode: Active
      VpcConfig: 
        SecurityGroupIds: 
          - 'Fn::GetAtt':
            - LambdaProductionSecurityGroup
            - GroupId
        SubnetIds:
          - 'Fn::ImportValue': >-
              networking-Subnet1
          - 'Fn::ImportValue': >-
              networking-Subnet2
      Environment:
        Variables:
          REDSHIFT_ENDPOINT: 
            Fn::Join:
              - ''
              - - "{{resolve:secretsmanager:"
                - Fn::ImportValue: production-redshift:ImovelProductionRedshiftSecretAttachment
                - ":SecretString:host}}"
          REDSHIFT_PORT: 
            Fn::Join:
              - ''
              - - "{{resolve:secretsmanager:"
                - Fn::ImportValue: production-redshift:ImovelProductionRedshiftSecretAttachment
                - ":SecretString:port}}"            
          REDSHIFT_USER: 
            Fn::Join:
              - ''
              - - "{{resolve:secretsmanager:"
                - Fn::ImportValue: production-redshift:ImovelProductionRedshiftSecretAttachment
                - ":SecretString:username}}"              
          REDSHIFT_PASSWD: 
            Fn::Join:
              - ''
              - - "{{resolve:secretsmanager:"
                - Fn::ImportValue: production-redshift:ImovelProductionRedshiftSecretAttachment
                - ":SecretString:password}}"            
          REDSHIFT_DATABASE:
            Fn::Join:
              - ''
              - - "{{resolve:secretsmanager:"
                - Fn::ImportValue: production-redshift:ImovelProductionRedshiftSecretAttachment
                - ":SecretString:dbname}}"              

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Description: 'api gateway'
      Name: 'imovel-api-gateway'

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: { "Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"] }
      PathPart: "imovel"
      RestApiId: !Ref ApiGatewayRestApi 
      
  ApiGatewayIntegrationList:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - "LambdaImovel"
    Properties: 
      HttpMethod: GET
      Integration: 
        Type: AWS_PROXY
        IntegrationHttpMethod: GET
        Uri: !Sub >-          
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaImovel.Arn}/invocations
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      AuthorizationType: NONE

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - "ApiGatewayIntegrationList"
    Properties:       
      RestApiId: !Ref ApiGatewayRestApi      
      StageName: 'production-api-imovel'

  # LambdaImovelEventSourceMapping:
  #   Type: AWS::Lambda::EventSourceMapping
  #   Properties: 
  #     EventSourceArn: 
  #       Fn::Join: 
  #         - ""
  #         - 
  #           - "arn:aws:kinesis:"
  #           - 
  #             Ref: "AWS::Region"
  #           - ":"
  #           - 
  #             Ref: "AWS::AccountId"
  #           - ":stream/"
  #           - 
  #             Ref: "KinesisStream"
  #     FunctionName: 
  #       Fn::GetAtt: 
  #         - "LambdaImovel"
  #         - "Arn"
  #     StartingPosition: "TRIM_HORIZON"
